import{r as e}from"./iframe-C0VeZLsT.js";import{r as u,u as f,c as y}from"./index-V48DHmLJ.js";import{u as b}from"./useElementBounds-BkKfoHSo.js";const g=u({slots:{container:"cursor-pointer flex relative",control:"absolute top-0 left-0",descriptors:"flex flex-col",hint:"text-gray-500"},variants:{sizer:{xs:{container:"gap-2 text-xs"},sm:{container:"gap-2.5 text-sm",hint:"text-xs"},base:{container:"gap-3 text-base",hint:"text-sm"},lg:{container:"gap-3.5 text-lg",hint:"text-base"},xl:{container:"gap-4 text-xl",hint:"text-lg"}},isDisabled:{true:{container:"cursor-not-allowed text-gray-400",hint:"text-gray-300"}}},defaultVariants:{sizer:"base",isDisabled:!1}});function x({children:o,className:l,label:i,labelId:c,hint:r,hintId:d,sizer:t,disabled:m,...p}){const s=e.useRef(null),h=b(s),a=f(t),n=g({sizer:a,isDisabled:m});return e.createElement("label",{"data-nickui-component":"CheckedField","data-nickui-sizer":Array.isArray(t)?t.join(","):t,"data-nickui-resolved-sizer":a,...p},e.createElement("div",{className:y(n.container(),l)},e.createElement("span",{style:{paddingLeft:h?.width||0},className:"relative"},e.createElement("div",{className:n.control(),ref:s},o),"​"),(i||r)&&e.createElement("div",{className:n.descriptors()},i&&e.createElement("div",{id:c},i),r&&e.createElement("div",{className:n.hint(),id:d},r))))}x.__docgenInfo={description:`Wraps a single checkable form control with a standard layout (label &
hint, to the right of the control).

This is simpler than the Field component. There’s no \`error\` message, since
if one or both possible values is invalid, the field has no purpose. And
there’s no \`required\` state, since that would make the unchecked state
invalid.

Note: this layout is already built-into Checkbox, Radio, and Switch—you can
use this component to create a custom form control with the same layout.`,methods:[],displayName:"CheckedField",props:{sizer:{required:!1,tsType:{name:"union",raw:"SizerType | SizerType[]",elements:[{name:"unknown[number]",raw:"(typeof SIZERS)[number]"},{name:"Array",elements:[{name:"unknown[number]",raw:"(typeof SIZERS)[number]"}],raw:"SizerType[]"}]},description:`Changes the size of the component. A sizer string, or an array of sizer
strings for responsive sizing.`},disabled:{required:!1,tsType:{name:"boolean"},description:"Prevents the user from interacting with the component"},label:{required:!1,tsType:{name:"DescriptorType"},description:"The main label to to the right of the form control, naming the field"},hint:{required:!1,tsType:{name:"DescriptorType"},description:"Additional detail about the field, placed directly below the label"},children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The content of the form-control section of the Field"},labelId:{required:!1,tsType:{name:"string"},description:"For accessibility purposes: an id to set on the label element"},hintId:{required:!1,tsType:{name:"string"},description:"For accessibility purposes: an id to set on the hint element"}}};export{x as C};
