import{F as h,S as u}from"./index-C9N6JpZ7.js";const i=n=>{if(typeof n=="object"&&n!==null){if(typeof Object.getPrototypeOf=="function"){const t=Object.getPrototypeOf(n);return t===Object.prototype||t===null}return Object.prototype.toString.call(n)==="[object Object]"}return!1},s=(...n)=>n.reduce((t,a)=>{if(a===void 0)return t;if(Array.isArray(a))throw new TypeError("Arguments provided to ts-deepmerge must be objects, not arrays.");return Object.keys(a).forEach(e=>{["__proto__","constructor","prototype"].includes(e)||(Array.isArray(t[e])&&Array.isArray(a[e])?t[e]=s.options.mergeArrays?s.options.uniqueArrayItems?Array.from(new Set(t[e].concat(a[e]))):[...t[e],...a[e]]:a[e]:i(t[e])&&i(a[e])?t[e]=s(t[e],a[e]):!i(t[e])&&i(a[e])?t[e]=s(a[e],void 0):t[e]=a[e]===void 0?s.options.allowUndefinedOverrides?a[e]:t[e]:a[e])}),t},{}),o={allowUndefinedOverrides:!0,mergeArrays:!0,uniqueArrayItems:!0};s.options=o;s.withOptions=(n,...t)=>{s.options=Object.assign(Object.assign({},o),n);const a=s(...t);return s.options=o,a};function b({isFlavorable:n,formControl:t,isSizerable:a,defaultValues:e,descriptions:f,types:p}){const r=!!(t?.isCheckable||t?.valueType);return s(c({...t?.isDisableable&&{disabled:!1},...n&&{flavor:"neutral"},sizer:"base"}),c(e),l({className:"Optionally add classes to the root element, such as to position the component, or add margins",...r&&{onChange:t?.isCheckable?"Called when the checked state of the component changes":"Called when the value of the component changes"}}),l(f),d({className:"string",...n&&{flavor:h},sizer:u,...t?.valueType&&{value:t.valueType,defaultValue:t.valueType},...r&&{onChange:"React.ChangeEventHandler"}}),d(p))}function c(n){return Object.entries(n||{}).reduce((t,[a,e])=>({...t,[a]:{table:{defaultValue:{summary:e}}}}),{})}function d(n){return Object.entries(n||{}).reduce((t,[a,e])=>e?.length?{...t,[a]:{table:{type:{summary:Array.isArray(e)?e.join("|"):e}}}}:t,{})}function l(n){return Object.entries(n||{}).reduce((t,[a,e])=>e?.length?{...t,[a]:{description:e}}:t,{})}export{b as g};
